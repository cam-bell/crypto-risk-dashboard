# version: "3.8"

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: crypto_risk_postgres
    environment:
      POSTGRES_DB: crypto_risk_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      TIMESCALEDB_TELEMETRY: "off"
      POSTGRES_HOST_AUTH_METHOD: "trust"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/01-init-timescaledb.sql:/docker-entrypoint-initdb.d/01-init-timescaledb.sql
    command: postgres -c listen_addresses='*'
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d crypto_risk_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crypto_risk_network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: crypto_risk_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crypto_risk_network

  # Backend API
  backend:
    build: ./backend
    container_name: crypto_risk_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/crypto_risk_db
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - crypto_risk_network

  # Frontend
  frontend:
    build: ./frontend
    container_name: crypto_risk_frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - crypto_risk_network

volumes:
  postgres_data:
  redis_data:

networks:
  crypto_risk_network:
    driver: bridge
